#textdomain wesnoth-Archaic_Era

########## Traits    ####################

#define ARCHAIC_TRAIT_PHANTOM
    # Units with trait Phantom cannot be drained, poisoned or plagued.  This is just cosmetic
    [trait]
        id=aa_phantom
        availability="musthave"
        male_name= _ "phantom"
        female_name= _ "female^phantom"
        description= _ "Immune to drain, poison and plague"
        [effect]
            apply_to=status
            add=not_living
        [/effect]
    [/trait]
#enddef

#define ARCHAIC_TRAIT_ZEALOUS
    # Units with trait Loyal have no upkeep.
    [trait]
        id=aa_zealous
        male_name= _ "zealous"
        female_name= _ "female^zealous"
        description= _ "Zero upkeep"
        [effect]
            apply_to=loyal
        [/effect]
        [effect]
            apply_to=max_experience
            increase=30%
        [/effect]
	[effect]
            apply_to=attack
            range=melee
            increase_damage=1
        [/effect]
    [/trait]
#enddef

########## Abilities ####################

#define ARCHAIC_ABILITY_DANCER
    # Canned definition of Dancer ability to be included in an
    # [abilities] clause.
    [resistance]
        id=aa_dance
        multiply=2
        max_value=60
        # applies to any type if we leave it out, so don't leave it out
        apply_to=blade,pierce,impact
        [filter_base_value]
            greater_than=0
            less_than=60
        [/filter_base_value]
        name= _ "dancer"
        female_name= _ "female^dancer"
        description= _ "Dancer:
This unit's physical (pierce, impact, blade) resistances are doubled, up to a maximum of 60%, when defending because the enemy cannot get a direct hit."
        affect_self=yes
        active_on=defense
    [/resistance]
#enddef

#define ARCHAIC_ABILITY_HEALS AMT
    # Canned definition of the heal+amt ability to be included in an [abilities] clause.
    [heals]
        value={AMT}
        id=aa_healing
        affect_allies=yes
        name= _ "heals +"+"{AMT}"
        female_name= _ "female^heals +"+"{AMT}"
        description=  _ "Heals +{AMT}:
Allows the unit to heal adjacent allied units at the beginning of our turn.

A unit cared for by this healer may heal up to {AMT} HP per turn, or stop poison from taking effect for that turn.
A poisoned unit cannot be cured of its poison by a healer, and must seek the care of a village or a unit that can cure."
        affect_self=no
        poison=slowed
        [affect_adjacent]
            adjacent=n,ne,se,s,sw,nw
        [/affect_adjacent]
    [/heals]
#enddef


#define ARCHAIC_ABILITY_IMMORTAL
    # Canned definition of Immortal ability to be included in an
    # [abilities] clause.
       [regenerate]
        value=99
        id=aa_immortal
        name= _ "immortal"
        female_name= _ "female^immortal"
        description= _ "immortal:
This unit heals 99 HP per turn.  If poisoned, it will remove the poison."
        affect_self=yes
        poison=cured
        [/regenerate]
#enddef

#define ARCHAIC_ABILITY_STONE
    # Put this in an [abilities]
	[resistance]
        id=aa_stone
        name= _ "stone"
        female_name= _ "female^stone"
        description=_ "Stone:
This unit is stone in the daylight, but is mobile at night."
        multiply=2
        max_value=50
        # applies to any type if we leave it out
        #apply_to=blade,pierce,impact,fire,cold,arcane
        [filter_base_value]
            greater_than=0
            less_than=50
        [/filter_base_value]
        affect_self=yes
        active_on=defense
    [/resistance]

[/abilities]



    [event]
    name=new turn
    first_time_only=no
        [store_unit]
	     [filter]
		ability=aa_stone
		[and]
		[filter_location]
		time_of_day=chaotic
		[/filter_location]
		[or]
		[filter_adjacent]
		is_enemy=no
		[/filter_adjacent]
		[/or]
		[/and]
	     [/filter]
	     kill=yes
	     variable=unstone_temp
	[/store_unit]
    {FOREACH unstone_temp i}
#	[message]
#	speaker=narrator
#	message="$unstone_temp[$i].name"
#	[/message]
        [set_variable]
            name=unstone_temp[$i].status.petrified
            value=no
        [/set_variable]
        [unstore_unit]
            variable=unstone_temp[$i]
            find_vacant=no
        [/unstore_unit]
    {NEXT i}
    {CLEAR_VARIABLE unstone_temp}
    [/event]

    [event]
    name=new turn
    first_time_only=no
        [store_unit]
	     [filter]
		ability=aa_stone
		[filter_location]
		time_of_day=lawful
		[/filter_location]
		[not]
		    [filter_adjacent]
		    is_enemy=no
		    [/filter_adjacent]
		[/not]
		[not]
	            [filter_location]
	                terrain=*^V*
	            [/filter_location]
		[/not]
	     [/filter]
	     kill=yes
	     variable=stone_temp
	[/store_unit]	
    {FOREACH stone_temp i}
        [set_variable]
            name=stone_temp[$i].status.petrified
            value=yes
        [/set_variable]
        [unstore_unit]
            variable=stone_temp[$i]
            find_vacant=no
        [/unstore_unit]
    {NEXT i}
    {CLEAR_VARIABLE unstone_temp}
    [/event]

[+abilities]
#enddef

#define ARCHAIC_STONE_EVENTS
# flag the stoned units
   [event]
   name=attacker_hits
   first_time_only=no
	[filter_attack]
	name=stone_hand
	[/filter_attack]
	[store_unit]
	    [filter]
		x,y=$x1,$y1
	    [/filter]
	    kill=no
	    variable=stoner_temp
	[/store_unit]
	[store_unit]
	    [filter]
		x,y=$x2,$y2
	    [/filter]
	    kill=yes
	    variable=caught_temp
	[/store_unit]
#	[set_variable]
#	name=caught_temp.variables.caught
#	value=yes
#	[/set_variable]
	[set_variable]
	name=caught_temp.variables.caught
	value=$stoner_temp.id
	[/set_variable]
	[unstore_unit]
	variable=caught_temp
	[/unstore_unit]
	{CLEAR_VARIABLE stoner_temp}
	{CLEAR_VARIABLE caught_temp}
   [/event]	

# The captured units become free when daylight arrives
#   [event]
#   name=new turn
#   first_time_only=no
#	[store_unit]
#	    [filter]
#		[filter_wml]
#		    [variables]
#			caught="yes"
#		    [/variables]
#		[/filter_wml]
#		[filter_location]
#		time_of_day=lawful
#		[/filter_location]
#
# Actually, the captured units become free when the guy that
# stoned them dies.
    [event]
    name=die
	[filter]
	ability=aa_stone
	[/filter]
	[store_unit]
	    [filter]
		[filter_wml]
		    [variables]
# I'm not sure if variable substitution works here
			caught=$unit.id
		    [/variables]
		[/filter_wml]	
	    [/filter]
	    variable=caught_temp
	    kill=yes
	[/store_unit]
    {FOREACH caught_temp i}
        [set_variable]
            name=caught_temp[$i].status.petrified
            value=no
        [/set_variable]
        [unstore_unit]
            variable=caught_temp[$i]
            find_vacant=no
	    text=_"Free"
	    red,green,blue=200,200,200
        [/unstore_unit]
    {NEXT i}
    {CLEAR_VARIABLE caught_temp}
    [/event]
#enddef

#########################################
## Khthon things
#############################

#define ARCHAIC_KHTHONIZED FILTER
# These MODIFY_UNIT things will not persist.  What to do...
        {MODIFY_UNIT {FILTER} race lesser_khthon}
        {MODIFY_UNIT {FILTER} alignment chaotic}
        [object]
                silent=yes
                duration=forever
                    [filter]
                        {FILTER}
                    [/filter]
                [effect]
                        apply_to=attack
                        range=melee
                        increase_damage=20%
                [/effect]
                [effect]
                        apply_to=attack
                        range=ranged
                        increase_damage=20%
                [/effect]
                [effect]
                        apply_to=resistance
                        replace=false
                        [resistance]
                        cold=-30
                        arcane=30
                        [/resistance]
                [/effect]
                [effect]
                        apply_to=hitpoints
                        increase_total=-25%
                        full_heal=yes
                [/effect]
                [effect]
                        apply_to=image_mod
                        replace="CS(-100,-25,-22)"
                [/effect]
        [/object]
        [redraw][/redraw]
#enddef


#define ARCHAIC_WEAPON_VECTOR DAMAGE
        [attack]
                name=khthon_vector
                description= _ "Vector"
                type=arcane
                range=ranged
                damage={DAMAGE}
                number=4
                icon=attacks/magic-missile.png
#		defense_weight=0
# FAI might be able to handle this, but for now I should make default AI like this thing a bit more
		attack_weight=2.0
# I'm changing this, so the take-over is still rare, but the arcane attack is useful against the undead , etc.
	    [specials]
	{WEAPON_SPECIAL_SWARM}
#	    [chance_to_hit]
#	        id=khthon_vector
#	        name= _ "vector"
#	        description= _ "Vector:
#This attack always has a 33% chance to hit regardless of the defensive ability of the unit being attacked.  If hit, susceptable opponents become Khthon."
#	        value=33
#	        cumulative=no
#	    [/chance_to_hit]
	    [/specials]
	[/attack]
	[attack_anim]
		[filter_attack]
		name=khthon_vector
		[/filter_attack]	
	{MISSILE_FRAME_WAIL}
	start_time=-300
	[/attack_anim]
#enddef

#define ARCHAIC_VECTOR_EVENTS
# I don't know what will happen if the attack aborts because the victim was hit, so store_unit
# at the beginning of attack, don't clear variable until attack_end.
# this is not firing? - no it is firing, once for every khthon unit on the map, so clearing the variable breaks it
# attack begins, set "vector_event_ended" to 0.  If attacker hits, set to 1 after first time, and event should not do anything after that.
# similarly, after attack ends, set variable to 2 and the event should be silenced after first time.
# Then, next time vector attack is used, variable is set to 0 and we start over.  Basically, all [event]s need to depend upon the "vector_event_ended" 
# so they fire (1), (2), (3) and not (1)X(# of khthon), (2)X(# of khthon), (3)X(# of khthon).
	[event]
	name=attack
	first_time_only=no
	    [filter_attack]
		name=khthon_vector
	    [/filter_attack]
                [store_unit]
                    [filter]
                        x,y=$x1,$y1
                    [/filter]
                    variable=attacker_temp
                    kill=no
                [/store_unit]
                [store_unit]
                    [filter]
                        x,y=$x2,$y2
                    [/filter]
                    variable=victim_temp
                    kill=no
                [/store_unit]
		[set_variable]
		name=vector_event_ended
		value=0
		[/set_variable]
#	[message]
#	speaker=narrator
#	message= _ "Fired! $victim_temp.level"
#	[/message]
# OK, so it fires
	[/event]

	[event]
# it doesn't matter if the attack was successful, attacker pays for it
	name=attack_end
	first_time_only=no
	    [filter_attack]
		name=khthon_vector
	    [/filter_attack]
#	[message]
#	speaker=narrator
#	message= _ "Fired! $victim_temp.level"
#	[/message]
#	It fires multiple times, so ...
		[if]
		    [variable]
			name=vector_event_ended
			less_than=2
		    [/variable]
# this should stop the event from firing if the unit dies?
		    [and]
			[have_unit]
			x,y=$x1,$y1
			[/have_unit]
		    [/and]
		    [then]
# store the attacker again, so defender attacks are not negated
                [store_unit]
                    [filter]
                        x,y=$x1,$y1
                    [/filter]
                    variable=attacker_temp
                    kill=yes
                [/store_unit]
# find the difference between attacker and defender levels
		[set_variable]
		name=damage_attacker
		value=$victim_temp.level
		[/set_variable]
		[set_variable]
		name=damage_attacker
		sub=$attacker_temp.level
		[/set_variable]
# we don't want to heal the attacker
		[if]
		    [variable]
			name=damage_attacker
			less_than=0
		    [/variable]
		    [then]
			[set_variable]
			name=damage_attacker
			value=0
			[/set_variable]
		    [/then]
		[/if]			
		[set_variable]
		name=damage_attacker_vis
		value=$attacker_temp.hitpoints
		[/set_variable]
		[set_variable]
		name=damage_attacker
		add=1
		[/set_variable]
		[set_variable]
		name=damage_attacker
# this might need to be adjusted
		multiply=-1.5
		[/set_variable]
# converting it to how much attacker has left
		[set_variable]
		name=damage_attacker
		add=10
		[/set_variable]
		[set_variable]
		name=attacker_temp.hitpoints
		multiply=$damage_attacker
		[/set_variable]
		[set_variable]
		name=attacker_temp.hitpoints
		multiply=0.1
		[/set_variable]
		[set_variable]
		name=damage_attacker_vis
		sub=$attacker_temp.hitpoints
		[/set_variable]
		[set_variable]
		name=damage_attacker_vis
		round=0
		[/set_variable]
		[unstore_unit]
		variable=attacker_temp
	        red,green,blue=255,0,0
	        text= _ "$damage_attacker_vis"
		[/unstore_unit]
		{CLEAR_VARIABLE damage_attacker}
		{CLEAR_VARIABLE damage_attacker_vis}
		{CLEAR_VARIABLE victim_temp}
		{CLEAR_VARIABLE attacker_temp}
# so this event only gets fired once, no matter how many khthon are on the map
		[set_variable]
		name=vector_event_ended
		value=2
		[/set_variable]
		    [/then]
		    [/if]
	[/event]	

        [event]
        name=attacker_hits
	first_time_only=no
            [filter_second]
                [not]
                race=primeval
                [/not]
		[not]
		race=undead
		[/not]
		[not]
		race=phantom_egypt
		[/not]
		[not]
		race=phantom_spirit
		[/not]
		[not]
		race=despair
		[/not]
		[not]
		race=despair_wisp
		[/not]
		[not]
		race=mechanical
		[/not]
		[not]
		race=khthon
		[/not]
		[not]
		canrecruit=yes
		[/not]
            [/filter_second]
	    [filter_attack]
		name=khthon_vector
	    [/filter_attack]
	    [set_variable]
		name=vector_chance_temp
		rand=1..5
# for testing
#		rand=1..2
	    [/set_variable]
		[if]
# so it only gets fired once
		    [variable]
			name=vector_event_ended
			less_than=1
		    [/variable]
		    [and]
			[variable]
			    name=vector_chance_temp
			    numerical_equals=1
			[/variable]
		    [/and]
		    [then]
                [set_variable]
                name=victim_temp.race
                value=lesser_khthon
                [/set_variable]
                [set_variable]
                name=victim_temp.side
                value=$attacker_temp.side
                [/set_variable]
                [set_variable]
                name=victim_temp.alignment
                value=chaotic
                [/set_variable]
		[set_variable]
		name=victim_temp.moves
		value=0
		[/set_variable]
		[kill]
		x,y=$x2,$y2
		[/kill]
		[unstore_unit]
		variable=victim_temp
	        red,green,blue=0,200,150
	        text= _ "Possessed"
		[/unstore_unit]
# this should use the KHTHONIZED macro 
		[object]
		silent=yes
		duration=forever
		    [filter]
			x,y=$x2,$y2
		    [/filter]
		[effect]
			apply_to=attack
			range=melee
			increase_damage=20%
		[/effect]
		[effect]
			apply_to=resistance
			replace=false
			[resistance]
			cold=-30
			arcane=30
			[/resistance]
		[/effect]
		[effect]
			apply_to=hitpoints
			increase_total=-25%
			full_heal=yes
		[/effect]
		[effect]
			apply_to=image_mod
			replace="CS(-100,-25,-22)"
		[/effect]
		[/object]
		[set_variable]
		name=vector_event_ended
		value=1
		[/set_variable]
		    [/then]
		    [/if]		
	[/event]	

	[event]
# this is to make sure the khthon stuff doesn't go away when the unit advances
	name=advance
	first_time_only=no
	    [filter]
		race=lesser_khthon
	    [/filter]
# It should be OK to store just this one unit, because the next event should always fire afterward
		[store_unit]
		    [filter]
			x,y=$x1,$y1
		    [/filter]
		    variable=advancer_temp
		    kill=no
		[/store_unit]
	[/event]
	[event]
	name=post advance
	first_time_only=no
	    [filter]
		side=$advancer_temp.side
	    [/filter]
		[store_unit]
		    [filter]
			x,y=$x1,$y1
		    [/filter]
		    variable=post_advancer_temp
		    kill=no
		[/store_unit]
	    [if]
		[variable]
		name=post_advancer_temp.id
		equals=$advancer_temp.id
		[/variable]
		[then]
		[kill]
		    x,y=$x1,$y1
		[/kill]
                [set_variable]
                name=post_advancer_temp.race
                value=lesser_khthon
                [/set_variable]
                [set_variable]
                name=post_advancer_temp.alignment
                value=chaotic
                [/set_variable]
		[unstore_unit]
		variable=post_advancer_temp
		[/unstore_unit]
		{CLEAR_VARIABLE advancer_temp}
		{CLEAR_VARIABLE post_advancer_temp}
		[/then]
	    [/if]
	[/event]
#enddef

###########################################################
### End Khthon stuff
###########################################################

#####################
# to make the shell hiding stuff
####################

#define ARCHAIC_SHELL_TRANSFORM
# put this in an [event]

	# hide
	{TRANSFORM_UNIT (
		type=Terrapin
		side=$side_number
		[filter_adjacent]
		count=3,4,5,6
		adjacent=n,ne,se,s,sw,nw
		is_enemy=yes
		[/filter_adjacent]
		) (Terrapin_Hiding)}
	# unhide
	{TRANSFORM_UNIT (
		type=Terrapin_Hiding
		side=$side_number
		[filter_adjacent]
		count=0,1
		adjacent=n,ne,se,s,sw,nw
		is_enemy=yes
		[/filter_adjacent]
		) (Terrapin)}
	# hide
	{TRANSFORM_UNIT (
		type=Snapper
		side=$side_number
		[filter_adjacent]
		count=4,5,6
		adjacent=n,ne,se,s,sw,nw
		is_enemy=yes
		[/filter_adjacent]
		) (Snapper_Hiding)}
	# unhide
	{TRANSFORM_UNIT (
		type=Snapper_Hiding
		side=$side_number
		[filter_adjacent]
		count=0-2
		adjacent=n,ne,se,s,sw,nw
		is_enemy=yes
		[/filter_adjacent]
		) (Snapper)}
	# hide
	{TRANSFORM_UNIT (
		type=Adamantine
		side=$side_number
		[filter_adjacent]
		count=4,5,6
		adjacent=n,ne,se,s,sw,nw
		is_enemy=yes
		[/filter_adjacent]
		) (Adamantine_Hiding)}
	# unhide
	{TRANSFORM_UNIT (
		type=Adamantine_Hiding
		side=$side_number
		[filter_adjacent]
		count=0-2
		adjacent=n,ne,se,s,sw,nw
		is_enemy=yes
		[/filter_adjacent]
		) (Adamantine)}
#enddef
	

#define ARCHAIC_SHELL_EVENTS
    # Eventually, it would be good to make this a right-click menu and FAI function so it is handled more intelligently,
    # but this will do for now...

    [event]
	name=ai turn
	first_time_only=no

    {ARCHAIC_SHELL_TRANSFORM}

    [/event]

    [event]
# this needs to be in something like a 'side turn' so that the turtles don't need to be there
# in the scenario beginning
	name=start,side turn
	first_time_only=no
	[set_menu_item]
	id=aa_shell1
	image=misc/slowed.png
	description=_"hide in shell"
	[show_if]
	  [have_unit]
	    side=$side_number
	    x,y=$x1,$y1
	    type=Terrapin
	    [not]
		[filter_wml]
		   moves="0"
		[/filter_wml]
	    [/not]
          [/have_unit]
	[/show_if]
	[command]
	{TRANSFORM_UNIT (x,y=$x1,$y1) (Terrapin_Hiding)}
	[/command]	
	[/set_menu_item]
	[set_menu_item]
	id=aa_shell1b
	image=misc/status-self.png
	description=_"stop hiding"
	[show_if]
	  [have_unit]
	    side=$side_number
	    x,y=$x1,$y1
	    [not]
		[filter_wml]
		   moves="0"
		[/filter_wml]
	    [/not]
	    type=Terrapin_Hiding
          [/have_unit]
	[/show_if]
	[command]
	{TRANSFORM_UNIT (x,y=$x1,$y1) (Terrapin)}
	[/command]	
	[/set_menu_item]

	[set_menu_item]
	id=aa_shell2
	image=misc/slowed.png
	description="hide in shell"
	[show_if]
	  [have_unit]
	    side=$side_number
	    x,y=$x1,$y1
	    [not]
		[filter_wml]
		   moves="0"
		[/filter_wml]
	    [/not]
	    type=Snapper
          [/have_unit]
	[/show_if]
	[command]
	{TRANSFORM_UNIT (x,y=$x1,$y1) (Snapper_Hiding)}
	[/command]	
	[/set_menu_item]
	[set_menu_item]
	id=aa_shell2b
	image=misc/status-self.png
	description="stop hiding"
	[show_if]
	  [have_unit]
	    side=$side_number
	    x,y=$x1,$y1
	    [not]
		[filter_wml]
		   moves="0"
		[/filter_wml]
	    [/not]
	    type=Snapper_Hiding
          [/have_unit]
	[/show_if]
	[command]
	{TRANSFORM_UNIT (x,y=$x1,$y1) (Snapper)}
	[/command]	
	[/set_menu_item]

	[set_menu_item]
	id=aa_shell3
	image=misc/slowed.png
	description="hide in shell"
	[show_if]
	  [have_unit]
	    side=$side_number
	    x,y=$x1,$y1
	    [not]
		[filter_wml]
		   moves="0"
		[/filter_wml]
	    [/not]
	    type=Adamantine
          [/have_unit]
	[/show_if]
	[command]
	{TRANSFORM_UNIT (x,y=$x1,$y1) (Adamantine_Hiding)}
	[/command]	
	[/set_menu_item]
	[set_menu_item]
	id=aa_shell3b
	image=misc/status-self.png
	description="stop hiding"
	[show_if]
	  [have_unit]
	    side=$side_number
	    x,y=$x1,$y1
	    [not]
		[filter_wml]
		   moves="0"
		[/filter_wml]
	    [/not]
	    type=Adamantine_Hiding
          [/have_unit]
	[/show_if]
	[command]
	{TRANSFORM_UNIT (x,y=$x1,$y1) (Adamantine)}
	[/command]	
	[/set_menu_item]
	
    [/event]

#enddef

#define ARCHAIC_ABILITY_SELFHEAL
    # Canned definition of Immortal ability to be included in an
    # [abilities] clause.  Crappier version of mainline ABILITY_REGENERATES
       [regenerate]
        value=4
        id=aa_selfheal
        name= _ "selfheal"
        description= _ "selfheal:
This unit heals 4 HP per turn.  If poisoned, it will remove the poison."
        affect_self=yes
        poison=cured
        [/regenerate]
#enddef

#define ARCHAIC_ABILITY_PENUMBRA
    [illuminates]
        id=aa_penumbra
        value=-25
        max_value=-25
        cumulative=no
        name= _ "penumbra"
        female_name= _ "female^penumbra"
        description= _ "Penumbra:
This unit obscures the surrounding area, making chaotic units fight better, and lawful units fight worse.

Any units adjacent to this unit will fight as if it were dusk when it is day, and as if it were night when it is dusk."
        affect_self=yes
    [/illuminates]
#enddef

#define ARCHAIC_ABILITY_DESERTSTALK
    # Canned definition of the Desert-Stalk ability to be included in an
    # [abilities] clause.
    [hides]
        id=aa_desertstalk
        name= _ "desert-stalk"
        female_name= _ "female^desert-stalk"
        name_inactive= _ "desert-stalk"
        female_name_inactive= _ "female^desert-stalk"
        description= _ "Desert-Stalk:
This unit can hide in sand terrain, and remain undetected by its enemies.

Enemy units cannot see this unit while it is on desert terrain, except if they have units next to it. Any enemy unit that first discovers this unit immediately loses all its remaining movement."
        description_inactive= _ "Desert-Stalk:
This unit can hide in sand terrain, and remain undetected by its enemies.

Enemy units cannot see this unit while it is on desert terrain, except if they have units next to it. Any enemy unit that first discovers this unit immediately loses all its remaining movement."
        affect_self=yes
        [filter_self]
            [filter_location]
                terrain=Ds*,Dd*,Hd*,Md*
            [/filter_location]
        [/filter_self]
    [/hides]
#enddef


### These are for Khthon weirdness #############
# will probably be deleted, I don't think it is used anywhere anymore

#define KHTHON_KILL_CASE USAGE
# to just kill off the unit instead of controlling, -11 so it can't be healed
	    [case]
		value={USAGE}
		[set_variable]
		name=khthon_temp.hitpoints
		value=-11
		[/set_variable]	
	    [/case]
#enddef

#define KHTHON_CASE USAGE
            [case]
                value={USAGE}
                [set_variable]
                name=khthon_temp.advances_to
                value="Khthon-{USAGE}"
                [/set_variable]
                [set_variable]
                name=khthon_temp.race
                value=khthon
                [/set_variable]
                [set_variable]
                name=khthon_temp.experience
                value=0
                [/set_variable]
                [set_variable]
                name=khthon_temp.max_experience
                value=32
                [/set_variable]
                [set_variable]
                name=khthon_temp.side
                value=$khthon_temp2.side
                [/set_variable]
            [/case]
#enddef

#define KHTHON_CASE_MP USAGE
            [case]
                value={USAGE}
                [set_variable]
                name=khthon_temp.advances_to
                value="AMP Khthon-{USAGE}"
                [/set_variable]
                [set_variable]
                name=khthon_temp.race
                value=khthon
                [/set_variable]
                [set_variable]
                name=khthon_temp.experience
                value=0
                [/set_variable]
                [set_variable]
                name=khthon_temp.max_experience
                value=32
                [/set_variable]
                [set_variable]
                name=khthon_temp.side
                value=$khthon_temp2.side
                [/set_variable]
            [/case]
#enddef



#define KHTHON_JUMP TYPE

        [event]
        name=attack_end
        first_time_only=no
                [filter_second]
                type=Khthon-{TYPE}
                [/filter_second]
        [store_unit]
                [filter]
                x,y=$x2,$y2
                [/filter]
                kill=no
                variable=khthon_temp
        [/store_unit]
#       {DEBUG_MSG "$khthon_temp.x"}
        [if]
# if the khthon is near death
            [variable]
                name=khthon_temp.hitpoints
                less_than=15
            [/variable]
            [then]
            {TRANSFORM_UNIT (x,y=$x2,$y2) "Khthon-{TYPE}2"}
#       {DEBUG_MSG "$khthon_temp.type"}
            [/then]
        [/if]
        {CLEAR_VARIABLE khthon_temp}
        [/event]

        [event]
        name=attacker_hits
        first_time_only=no
                [filter]
                type="Khthon-{TYPE}2"
                [/filter]
                [filter_second]
                    [not]
                        race=primeval
                    [/not]
                    [not]
                        race=undead
                    [/not]
                    [not]
                        race=mechanical
                    [/not]
                    [not]
                        race=troll
                    [/not]
                [/filter_second]
        [store_unit]
                [filter]
                x,y=$x1,$y1
                [/filter]
                kill=no
                variable=khthon_temp2
        [/store_unit]
        [store_unit]
                [filter]
                x,y=$x2,$y2
                [/filter]
                kill=yes
                variable=khthon_temp
        [/store_unit]
        [switch]
# Humans, elves, mermen, nagas, and orcs can use the same variants.  Not so Dwarf, saurian, wose...
        variable=khthon_temp.race
# when and if I ever get sprites made, replace KILL_CASE with CASE.  Dwarf is done.
		{KHTHON_CASE dwarf}
		{KHTHON_KILL_CASE bats}		
		{KHTHON_KILL_CASE drake}		
		{KHTHON_KILL_CASE gryphon}		
		{KHTHON_KILL_CASE monster}		
		{KHTHON_KILL_CASE lizard}		
		{KHTHON_KILL_CASE wose}		
		[else]
		    [switch]
		    variable=khthon_temp.usage
			{KHTHON_CASE archer}
			{KHTHON_CASE healer}
			{KHTHON_CASE fighter}
			[else]			
	                [set_variable]
	                name=khthon_temp.advances_to
	                value="Khthon-fighter"
	                [/set_variable]
	                [set_variable]
	                name=khthon_temp.race
	                value=khthon
	                [/set_variable]
	                [set_variable]
	                name=khthon_temp.experience
	                value=0
	                [/set_variable]
	                [set_variable]
	                name=khthon_temp.max_experience
	                value=32
	                [/set_variable]
	                [set_variable]
	                name=khthon_temp.side
	                value=$khthon_temp2.side
	                [/set_variable]
			[/else]
		    [/switch]
		[/else]
	[/switch]
                [unstore_unit]
                variable=khthon_temp
                [/unstore_unit]
                [object]
                silent=yes
                    [filter]
                        x,y=$x2,$y2
                    [/filter]
                    [effect]
                        apply_to=image_mod
                        add="CS(-30,60,0)"
                    [/effect]
                [/object]
                [kill]
                x,y=$x1,$y1
                animate=yes
                [/kill]
        {CLEAR_VARIABLE khthon_temp}
        {CLEAR_VARIABLE khthon_temp2}
        [/event]

#enddef

#define KHTHON_JUMP_MP TYPE
# this is the same as KHTHON_JUMP, but for MP
# there is probably a better way to do this...
        [event]
        name=attack_end
        first_time_only=no
                [filter_second]
                type=AMP Khthon-{TYPE}
                [/filter_second]
        [store_unit]
                [filter]
                x,y=$x2,$y2
                [/filter]
                kill=no
                variable=khthon_temp
        [/store_unit]
        [if]
# if the khthon is near death
            [variable]
                name=khthon_temp.hitpoints
                less_than=15
            [/variable]
            [then]
            {TRANSFORM_UNIT (x,y=$x2,$y2) "AMP Khthon-{TYPE}2"}
            [/then]
        [/if]
        {CLEAR_VARIABLE khthon_temp}
        [/event]

        [event]
        name=attacker_hits
        first_time_only=no
                [filter]
                type="AMP Khthon-{TYPE}2"
                [/filter]
                [filter_second]
                    [not]
                        race=primeval
                    [/not]
                    [not]
                        race=undead
                    [/not]
                    [not]
                        race=mechanical
                    [/not]
                    [not]
                        race=troll
                    [/not]
                [/filter_second]
        [store_unit]
                [filter]
                x,y=$x1,$y1
                [/filter]
                kill=no
                variable=khthon_temp2
        [/store_unit]
        [store_unit]
                [filter]
                x,y=$x2,$y2
                [/filter]
                kill=yes
                variable=khthon_temp
        [/store_unit]
        [switch]
# Humans, elves, mermen, nagas, and orcs can use the same variants.  Not so Dwarf, saurian, wose...
        variable=khthon_temp.race
# when and if I ever get sprites made, replace KILL_CASE with CASE.  Dwarf is done.
		{KHTHON_CASE dwarf}
		{KHTHON_KILL_CASE bats}		
		{KHTHON_KILL_CASE drake}		
		{KHTHON_KILL_CASE gryphon}		
		{KHTHON_KILL_CASE monster}		
		{KHTHON_KILL_CASE lizard}		
		{KHTHON_KILL_CASE wose}		
		[else]
		    [switch]
		    variable=khthon_temp.usage
			{KHTHON_CASE_MP archer}
			{KHTHON_CASE_MP healer}
			{KHTHON_CASE_MP fighter}
			[else]			
	                [set_variable]
	                name=khthon_temp.advances_to
	                value="AMP Khthon-fighter"
	                [/set_variable]
	                [set_variable]
	                name=khthon_temp.race
	                value=khthon
	                [/set_variable]
	                [set_variable]
	                name=khthon_temp.experience
	                value=0
	                [/set_variable]
	                [set_variable]
	                name=khthon_temp.max_experience
	                value=32
	                [/set_variable]
	                [set_variable]
	                name=khthon_temp.side
	                value=$khthon_temp2.side
	                [/set_variable]
			[/else]
		    [/switch]
		[/else]
	[/switch]
                [unstore_unit]
                variable=khthon_temp
                [/unstore_unit]
                [object]
                silent=yes
                    [filter]
                        x,y=$x2,$y2
                    [/filter]
                    [effect]
                        apply_to=image_mod
                        add="CS(-30,60,0)"
                    [/effect]
                [/object]
                [kill]
                x,y=$x1,$y1
                animate=yes
                [/kill]
        {CLEAR_VARIABLE khthon_temp}
        {CLEAR_VARIABLE khthon_temp2}
        [/event]

#enddef

############## End Khthon #####################
###############################################


############# Phantom Animation utils ##########

#define PHANTOM_STAND_BOB IMAGE_STEM
# this is for the more ghostly units

    [standing_anim]
        start_time=0
        alpha=0.8~0.4:1400,0.4~0.6:600,0.6~0.4:600,0.4~0.8:1400
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}-lo.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}-hi.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}-lo.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}-hi.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250                  
                image="units/phantom/{IMAGE_STEM}-lo.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}-hi.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}-lo.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}-hi.png"
        [/frame]
    [/standing_anim]

#enddef

#define PHANTOM_STAND IMAGE_STEM
# this is for the less ghostly units

    [standing_anim]
        start_time=0
        alpha=1.0~0.4:1400,0.4~0.7:600,0.7~0.5:600,0.5~1.0:1400
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/phantom/{IMAGE_STEM}.png"
        [/frame]
    [/standing_anim]

#enddef


############# Despair Animation utils ##########

#define DESPAIR_STAND_BOB IMAGE_STEM
# this is for the more ghostly units

    [standing_anim]
        start_time=0
        alpha=0.8~0.4:1400,0.4~0.6:600,0.6~0.4:600,0.4~0.8:1400
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}-lo.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}-hi.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}-lo.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}-hi.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250                  
                image="units/despair/{IMAGE_STEM}-lo.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}-hi.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}-lo.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}-hi.png"
        [/frame]
    [/standing_anim]

#enddef

#define DESPAIR_STAND IMAGE_STEM
# this is for the less ghostly units

    [standing_anim]
        start_time=0
        alpha=1.0~0.4:1400,0.4~0.7:600,0.7~0.5:600,0.5~1.0:1400
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
        [frame]
            duration=250
                image="units/despair/{IMAGE_STEM}.png"
        [/frame]
    [/standing_anim]

#enddef



####### End Phantom Animation ##################
